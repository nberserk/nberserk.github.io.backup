#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_HTML
---
layout: post
title: segment tree
tags: algorithm tree segment
published: true
---
#+END_HTML

트리. 트리는 알고리즘 계에서 혁신적인 발견의 하나인데, O(N)으로 걸릴 만한 것을 O(longN)으로 바꿔주는 마법 같은 data structure이다. 트리는 여러가지 쓰임새가 있지만 이중에서도 segment tree에 대해서 알아보자.

* when
N개의 배열에서 특정 range(start, end)의 구간합을 구한다고 생각해보자. naive로 하면 O(N)이 걸린다.
각 배열의 값이 변하지 않는다고 가정하면 O(1)으로 값을 구할 수 있다. psum[N]을 선언하고 0~n까지의 합을 미리 계산하여 캐쉬하고 있으면 psum[end] - psum[start]로 구간합을 바로 구할 수 있다.
만약 각 배열의 값이 변한다면 가장 효율적인 방법은 무엇일까.. 이때 segement tree로 값을 구할 수 있다. tree에서의 insert는 O(longN)이므로 segment tree를 생성할때는 O(NlogN)이 걸리고 query는 O(longN), update는 O(longN)이 걸린다.

* idea
heap이랑 구조가 비슷하다. root는 모든 범위의 합을 가지고 있고(0 to N-1), left node는 왼쪽 반, right node는 오른쪽 반을 가지게 계속 나누어서 트리를 구성하면 된다. 각 노드는 자신의 범위를 가지고 그 범위의 구간합을 계산하여 가진다. left와 right의 값이 같아질때까지 이것을 반복하면 segment tree가 완성되게 된다. 
예를 들어, 4개의 원소가 있는 구간트리는 아래처럼 구성 되게 된다. 
#+BEGIN_SRC c++
                            +--------+
                            | (0,3)  |
                            +--------+
                +--------+              +--------+
                |  (0,1) |              |  (2,3) |
                +--------+              +--------+
          +--------+  +--------+   +--------+  +--------+
          |  (0,0) |  |  (1,1) |   |   (2,2)|  |  (3,3) |
          +--------+  +--------+   +--------+  +--------+

#+END_SRC

* implementation
** build
** query
** update

: ssh -i <your.pem>  -L 8890:localhost:8890  ec2-user@bastion



* revision history
- 2015/11/11 initial draft
